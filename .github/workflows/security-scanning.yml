name: Advanced Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  # Static Application Security Testing (SAST)
  sast-analysis:
    name: SAST Analysis
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        tool: [semgrep, codeql, sonarcloud]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Semgrep SAST scanning
    - name: Semgrep Security Scan
      if: matrix.tool == 'semgrep'
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
          p/nodejs
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    # CodeQL analysis
    - name: Initialize CodeQL
      if: matrix.tool == 'codeql'
      uses: github/codeql-action/init@v2
      with:
        languages: javascript,typescript
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      if: matrix.tool == 'codeql'
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      if: matrix.tool == 'codeql'
      uses: github/codeql-action/analyze@v2
    
    # SonarCloud analysis
    - name: SonarCloud Scan
      if: matrix.tool == 'sonarcloud'
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=travel-planner
          -Dsonar.organization=your-org
          -Dsonar.sources=backend/src,frontend/src
          -Dsonar.tests=backend/src/tests,frontend/src/tests
          -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
          -Dsonar.security.hotspots.enabledRules=true
    
    - name: Upload SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif

  # Dependency vulnerability scanning
  dependency-scanning:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.component }}/package-lock.json
    
    - name: Install dependencies
      run: |
        cd ${{ matrix.component }}
        npm ci
    
    # NPM Audit
    - name: NPM Security Audit
      run: |
        cd ${{ matrix.component }}
        npm audit --audit-level=moderate --json > npm-audit-${{ matrix.component }}.json || true
        npm audit --audit-level=high
    
    # Snyk vulnerability scanning
    - name: Install Snyk CLI
      run: npm install -g snyk
    
    - name: Snyk Security Scan
      run: |
        cd ${{ matrix.component }}
        snyk test --severity-threshold=high --json > ../snyk-${{ matrix.component }}.json || true
        snyk code test --json > ../snyk-code-${{ matrix.component }}.json || true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    
    # OWASP Dependency Check
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'travel-planner-${{ matrix.component }}'
        path: '${{ matrix.component }}'
        format: 'ALL'
        out: 'dependency-check-reports'
        args: >
          --enableRetired
          --enableExperimental
          --nvdApiKey ${{ secrets.NVD_API_KEY }}
    
    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: vulnerability-reports-${{ matrix.component }}
        path: |
          npm-audit-${{ matrix.component }}.json
          snyk-${{ matrix.component }}.json
          snyk-code-${{ matrix.component }}.json
          dependency-check-reports/

  # Container security scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: dependency-scanning
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        file: ./${{ matrix.component }}/Dockerfile
        tags: ${{ matrix.component }}-security-scan:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Trivy container scanning
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ matrix.component }}-security-scan:latest'
        format: 'sarif'
        output: 'trivy-${{ matrix.component }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        vuln-type: 'os,library'
        exit-code: '1'
    
    # Grype container scanning
    - name: Grype Container Scan
      uses: anchore/scan-action@v3
      with:
        image: '${{ matrix.component }}-security-scan:latest'
        fail-build: true
        severity-cutoff: high
        output-format: sarif
        output-file: grype-${{ matrix.component }}.sarif
    
    # Docker Scout (if available)
    - name: Docker Scout Scan
      if: github.event_name == 'push'
      run: |
        docker scout cves ${{ matrix.component }}-security-scan:latest \
          --format sarif \
          --output docker-scout-${{ matrix.component }}.sarif || true
    
    # Upload container scan results
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.component }}.sarif'
    
    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'grype-${{ matrix.component }}.sarif'
    
    - name: Upload container security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: container-security-${{ matrix.component }}
        path: |
          trivy-${{ matrix.component }}.sarif
          grype-${{ matrix.component }}.sarif
          docker-scout-${{ matrix.component }}.sarif

  # Infrastructure security scanning
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Terraform security scanning with Checkov
    - name: Checkov Terraform Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: deployment/terraform
        framework: terraform
        output_format: sarif
        output_file_path: checkov-terraform.sarif
        quiet: true
        soft_fail: true
    
    # Terraform security with tfsec
    - name: tfsec Terraform Security Scan
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: deployment/terraform
        format: sarif
        sarif_file: tfsec-terraform.sarif
        soft_fail: true
    
    # Terraform security with Snyk IaC
    - name: Snyk Infrastructure as Code
      run: |
        npm install -g snyk
        snyk iac test deployment/terraform --json > snyk-iac.json || true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    
    # Kubernetes manifest scanning (if applicable)
    - name: Kubesec Scan
      if: github.event_name == 'push'
      run: |
        if [ -d "k8s" ]; then
          docker run --rm -v $(pwd):/workspace kubesec/kubesec:latest scan /workspace/k8s/*.yaml > kubesec-results.json || true
        fi
    
    - name: Upload infrastructure security results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          checkov-terraform.sarif
          tfsec-terraform.sarif
    
    - name: Upload infrastructure reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: infrastructure-security
        path: |
          checkov-terraform.sarif
          tfsec-terraform.sarif
          snyk-iac.json
          kubesec-results.json

  # Secret scanning
  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # GitLeaks secret scanning
    - name: GitLeaks Secret Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}
    
    # TruffleHog secret scanning
    - name: TruffleHog OSS Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
    
    # Detect-secrets scanning
    - name: Detect Secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline
        detect-secrets diff .secrets.baseline
    
    - name: Upload secret scanning results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: secret-scanning-results
        path: |
          .secrets.baseline

  # License compliance scanning
  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.component }}/package-lock.json
    
    - name: Install dependencies
      run: |
        cd ${{ matrix.component }}
        npm ci
    
    # License checker
    - name: License Compliance Check
      run: |
        cd ${{ matrix.component }}
        npx license-checker --json --out ../license-${{ matrix.component }}.json
        npx license-checker --summary
        
        # Check for forbidden licenses
        npx license-checker --failOn 'GPL-2.0;GPL-3.0;AGPL-1.0;AGPL-3.0' || echo "Potential license issues found"
    
    # FOSSA license scanning (if available)
    - name: FOSSA License Scan
      if: env.FOSSA_API_KEY != ''
      run: |
        curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
        cd ${{ matrix.component }}
        fossa analyze
        fossa test
      env:
        FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
    
    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-compliance-${{ matrix.component }}
        path: license-${{ matrix.component }}.json

  # Security summary and reporting
  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scanning, container-security, infrastructure-security, secret-scanning, license-compliance]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all security artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate Security Summary
      run: |
        # Create comprehensive security report
        cat > security-summary.md << 'EOF'
        # Security Scan Summary
        
        **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref }}
        
        ## Scan Results Overview
        
        | Category | Status | Details |
        |----------|--------|---------|
        | SAST Analysis | ${{ needs.sast-analysis.result }} | Static code analysis |
        | Dependency Scan | ${{ needs.dependency-scanning.result }} | Vulnerability scanning |
        | Container Security | ${{ needs.container-security.result }} | Container image scanning |
        | Infrastructure | ${{ needs.infrastructure-security.result }} | IaC security scanning |
        | Secret Detection | ${{ needs.secret-scanning.result }} | Secret scanning |
        | License Compliance | ${{ needs.license-compliance.result }} | License validation |
        
        ## Action Items
        
        ### Critical Issues
        - Review SARIF reports uploaded to GitHub Security tab
        - Address any high/critical severity vulnerabilities
        - Verify no secrets are exposed in the codebase
        
        ### Recommendations
        - Update dependencies with known vulnerabilities
        - Review container base images for security updates
        - Ensure all secrets are properly managed in secret managers
        
        ## Links
        - [Security Tab](https://github.com/${{ github.repository }}/security)
        - [Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        
        EOF
    
    - name: Upload Security Summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary-report
        path: security-summary.md
    
    # Post security summary to PR (if it's a PR)
    - name: Comment Security Summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const securitySummary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔒 Security Scan Results\n\n${securitySummary}`
          });
    
    # Send notifications for security issues
    - name: Notify Security Team
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: |
          🚨 Security scanning failures detected in Travel Planner
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          
          Please review the security scan results immediately.
        webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}

  # Compliance reporting
  compliance-report:
    name: Compliance Report
    runs-on: ubuntu-latest
    needs: security-summary
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Generate Compliance Report
      run: |
        # Generate compliance report for SOC2, ISO27001, etc.
        cat > compliance-report.json << 'EOF'
        {
          "reportType": "security-compliance",
          "date": "$(date -u +"%Y-%m-%d")",
          "repository": "${{ github.repository }}",
          "commit": "${{ github.sha }}",
          "controls": {
            "access_control": {
              "status": "compliant",
              "details": "GitHub branch protection and required reviews enabled"
            },
            "vulnerability_management": {
              "status": "compliant", 
              "details": "Automated vulnerability scanning in CI/CD pipeline"
            },
            "secure_development": {
              "status": "compliant",
              "details": "SAST, DAST, and dependency scanning implemented"
            },
            "incident_response": {
              "status": "compliant",
              "details": "Security alerts and notification systems configured"
            }
          }
        }
        EOF
    
    - name: Upload Compliance Report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.json